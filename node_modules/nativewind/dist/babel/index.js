"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = require("node:path");
const types_1 = require("@babel/types");
const helper_module_imports_1 = require("@babel/helper-module-imports");
const extract_styles_1 = require("../postcss/extract-styles");
const visitor_1 = require("./visitor");
const allowed_paths_1 = require("./utils/allowed-paths");
const get_tailwind_config_1 = require("./utils/get-tailwind-config");
function default_1(_, options, cwd) {
    const errors = [];
    let tailwindConfig;
    if (options.tailwindConfig) {
        tailwindConfig = options.tailwindConfig;
    }
    else {
        const tailwindConfigPath = (0, node_path_1.resolve)(cwd, options.tailwindConfigPath || "./tailwind.config.js");
        tailwindConfig = (0, get_tailwind_config_1.getTailwindConfig)(tailwindConfigPath, {
            ...options,
            onError(error) {
                errors.push(error);
            },
        });
    }
    const { allowModuleTransform, allowRelativeModules } = (0, allowed_paths_1.getAllowedOptions)(tailwindConfig, options);
    return {
        visitor: {
            Program: {
                enter(path, state) {
                    if (!(0, allowed_paths_1.isAllowedProgramPath)({
                        path: state.filename,
                        allowRelativeModules,
                        cwd,
                    })) {
                        return;
                    }
                    let canCompile = true;
                    let canTransform = true;
                    switch (state.opts.mode) {
                        case "compileOnly": {
                            canTransform = false;
                            break;
                        }
                        case "transformOnly": {
                            canCompile = false;
                            break;
                        }
                    }
                    const visitorState = {
                        cwd,
                        rem: 16,
                        platform: "native",
                        mode: "compileAndTransform",
                        didTransform: false,
                        blockModuleTransform: [],
                        canCompile,
                        canTransform,
                        ...state,
                        ...state.opts,
                        allowModuleTransform,
                        allowRelativeModules,
                        blockList: new Set(),
                        tailwindConfig: tailwindConfig,
                    };
                    // Traverse the file
                    path.traverse(visitor_1.visitor, visitorState);
                    const { filename, didTransform } = visitorState;
                    const bodyNode = path.node.body;
                    if (didTransform) {
                        (0, helper_module_imports_1.addNamed)(path, "StyledComponent", "nativewind");
                    }
                    const content = [filename];
                    if (options.rawContent) {
                        content.push({ raw: options.rawContent, extension: "html" });
                    }
                    const safelist = tailwindConfig.safelist
                        ? [...tailwindConfig.safelist, "babel-empty"]
                        : ["babel-empty"];
                    const output = (0, extract_styles_1.extractStyles)({
                        ...tailwindConfig,
                        content,
                        // If the file doesn't have any Tailwind styles, it will print a warning
                        // We force an empty style to prevent this
                        safelist: safelist,
                    });
                    if (!output.hasStyles)
                        return;
                    bodyNode.push((0, types_1.expressionStatement)(output.stylesheetCreateExpression));
                    (0, helper_module_imports_1.addNamed)(path, "NativeWindStyleSheet", "nativewind");
                },
            },
        },
    };
}
exports.default = default_1;
